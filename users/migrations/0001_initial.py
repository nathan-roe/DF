# Generated by Django 4.0.6 on 2022-08-01 22:04

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Name cannot contain special characters.', regex='[`~!@#$%^&*()_|+=?;:"\\\',.<>{}\\\\[\\/\\]]')])),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Name cannot contain special characters.', regex='[`~!@#$%^&*()_|+=?;:"\\\',.<>{}\\\\[\\/\\]]')])),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=255)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verified_date', models.DateTimeField()),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
